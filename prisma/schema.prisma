// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  email String? @unique
  hashedPassword String?
  emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role String? @default("USER")
  sessions Session[]
  accounts Account[]
  hasNotification Boolean?
  IsAdmin Boolean?
  favoriteMovies String[] @db.ObjectId
  favoriteSeries String[] @db.ObjectId
  favoriteNews String[] @db.ObjectId 
  Admin Admin[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  videoUrl String
  thumbnailUrl String
  genre String
  duration String
  cast String[] @db.ObjectId
 }
model series {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  videoUrl String
  thumbnailUrl String
  genre String
  duration String
  seasons Int 
  epizodes Int
  cast String[] @db.ObjectId
}

model Actor{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  age Int 
  image String?
  married String?
  movieIds String[] @db.ObjectId
  seriesIds String[] @db.ObjectId
}
model News{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  createdAt DateTime? @default(now())
  updatedAt DateTime @updatedAt
  coverImage String 
  authorName String
  authorEmail String
  authorProfilePic String
  tags String[]
}

model UpcomingProduct{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String 
  description String
  releaseDate DateTime
  image String
  genre String
  duration String 
}
model Admin {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId @unique
  createdAt DateTime  @default(now())
  expireAt  DateTime?
  updatedAt DateTime  @updatedAt
  parentId String @db.ObjectId
  user      User      @relation(fields: [userId], references: [id]) 
}